// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RebelsTasks.DataAccess;

namespace RebelsTasks.DataAccess.Migrations
{
    [DbContext(typeof(RebelTaskContext))]
    [Migration("20220329152200_MainTaskAndProjectMigration")]
    partial class MainTaskAndProjectMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RebelsTasks.DataAccess.Model.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepartmentDescription")
                        .IsRequired()
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            DepartmentDescription = "Yazılım Ve Kod Geliştirme Depertmanı",
                            DepartmentName = "Yazılım"
                        },
                        new
                        {
                            DepartmentId = 2,
                            DepartmentDescription = "Proje Analizi ,İş Analizi ve Genel Tasarım",
                            DepartmentName = "Proje Analiz"
                        },
                        new
                        {
                            DepartmentId = 3,
                            DepartmentDescription = "Arayüz Ve Görsel Depertmanı",
                            DepartmentName = "Grafik Ve Arayüzü"
                        },
                        new
                        {
                            DepartmentId = 4,
                            DepartmentDescription = "Yöneticiler Deperatmanı",
                            DepartmentName = "Yönetim"
                        });
                });

            modelBuilder.Entity("RebelsTasks.DataAccess.Model.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeFirstName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmployeeLastName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LeaveDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(100)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            DepartmentId = 1,
                            EmployeeFirstName = "Tsubsa",
                            EmployeeLastName = "Ozora",
                            HireDate = new DateTime(2012, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Yazılım Geliştiricisi"
                        },
                        new
                        {
                            EmployeeId = 2,
                            DepartmentId = 1,
                            EmployeeFirstName = "Misaki",
                            EmployeeLastName = "Taro",
                            HireDate = new DateTime(2015, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Yazılım Geliştiricisi"
                        },
                        new
                        {
                            EmployeeId = 3,
                            DepartmentId = 1,
                            EmployeeFirstName = "Kojiro",
                            EmployeeLastName = "Huga",
                            HireDate = new DateTime(2014, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LeaveDate = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Yazılım Geliştiricisi"
                        },
                        new
                        {
                            EmployeeId = 4,
                            DepartmentId = 2,
                            EmployeeFirstName = "Sanae",
                            EmployeeLastName = " Nakazawa",
                            HireDate = new DateTime(2014, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "İş Analisti"
                        },
                        new
                        {
                            EmployeeId = 5,
                            DepartmentId = 2,
                            EmployeeFirstName = "Yayoi",
                            EmployeeLastName = "Aoba",
                            HireDate = new DateTime(2014, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LeaveDate = new DateTime(2015, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Yazılım Geliştiricisi"
                        },
                        new
                        {
                            EmployeeId = 6,
                            DepartmentId = 3,
                            EmployeeFirstName = "Kumi",
                            EmployeeLastName = "Sugimota",
                            HireDate = new DateTime(2018, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Grafik Tasarımcısı"
                        },
                        new
                        {
                            EmployeeId = 7,
                            DepartmentId = 4,
                            EmployeeFirstName = "Roberto",
                            EmployeeLastName = "Hongo",
                            HireDate = new DateTime(2010, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Proje Yöneticisi"
                        },
                        new
                        {
                            EmployeeId = 8,
                            DepartmentId = 4,
                            EmployeeFirstName = "Munemasa",
                            EmployeeLastName = "Mu",
                            HireDate = new DateTime(2011, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Ar-Ge Yöneticisi"
                        });
                });

            modelBuilder.Entity("RebelsTasks.DataAccess.Model.MainTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignedToEmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(180)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("RequiredExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToEmployeeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("MainTask");
                });

            modelBuilder.Entity("RebelsTasksDataAccessModel.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ClosedOn")
                        .HasColumnType("datetime2(2)");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("datetime2(2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstimatedDurationInDays")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartedOn")
                        .HasColumnType("datetime2(2)");

                    b.HasKey("ProjectId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("RebelsTasks.DataAccess.Model.Employee", b =>
                {
                    b.HasOne("RebelsTasks.DataAccess.Model.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("RebelsTasks.DataAccess.Model.MainTask", b =>
                {
                    b.HasOne("RebelsTasks.DataAccess.Model.Employee", "AssignedToEmployee")
                        .WithMany()
                        .HasForeignKey("AssignedToEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RebelsTasksDataAccessModel.Project", "Project")
                        .WithMany("MainTasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("RebelsTasks.DataAccess.Model.SubTask", "SubTasks", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Description")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("ParentId")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("ParentId");

                            b1.ToTable("SubTask");

                            b1.WithOwner("ParentTask")
                                .HasForeignKey("ParentId");

                            b1.Navigation("ParentTask");
                        });

                    b.Navigation("AssignedToEmployee");

                    b.Navigation("Project");

                    b.Navigation("SubTasks");
                });

            modelBuilder.Entity("RebelsTasks.DataAccess.Model.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("RebelsTasksDataAccessModel.Project", b =>
                {
                    b.Navigation("MainTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
